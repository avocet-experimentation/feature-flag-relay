@baseUrl=localhost:3524/client

### Creates a new flag
POST http://{{baseUrl}} HTTP/1.1
Content-Type: application/json

{
  "name": "fifthTestFlag",
  "description": "This is an A/B test.",
  "metrics": {
    "primary": "conversion_rate",
    "secondary": "user_engagement"
  },
  "state": "in_test",
  "targetingRules": {
    "geo": "US"
  },
  "environments": {
    "testing": {
      "rollout": 100,
      "userGroups": {
        "control": {
          "rollout": 50,
          "trackingEvents": ["clicks", "conversion"],
          "enabled": false,
          "value": 100
        },
        "treatment": {
          "rollout": 50,
          "trackingEvents": ["clicks", "conversion"],
          "enabled": true,
          "value": 200
        }
      }
    }
  }
}

## < ./fflagTwo.json
### secondTestFlag => id : 671b0cf63fae92caad5a206b
### thirdTestFlag => id : 671af0f224cd94c8ab8c8277
### fifthTestFlag => id : 671bd88a50792eb9e53dd2cc

### Updates flag using its id
PUT http://{{baseUrl}}/671af0f224cd94c8ab8c8277
Content-Type: application/json

{
  "id": "671af0f224cd94c8ab8c8277",
  "name": "thirdTestFlag",
  "description": "This is an A/B test.",
  "metrics": {
    "primary": "conversion_rate",
    "secondary": "user_engagement"
  },
  "state": "in_test",
  "targetingRules": {
    "geo": "US"
  },
  "environments": {
    "testing": {
      "rollout": 100,
      "userGroups": {
        "control": {
          "rollout": 50,
          "trackingEvents": ["clicks", "conversion"],
          "enabled": false,
          "value": 100
        },
        "treatment": {
          "rollout": 50,
          "trackingEvents": ["clicks", "conversion"],
          "enabled": true,
          "value": 200
        }
      }
    }
  }
}


### Physically deletes flag using its id
DELETE http://{{baseUrl}}/671aeeea0fdc2c7e20ce7eee
Accept: text/json

> {%
    client.test("DELETE executed successfully", function () {
        client.assert(response.status === 204, "Response status is not 204");
    });
%}

### Returns flag by its id
GET http://{{baseUrl}}/id/671bd88a50792eb9e53dd2cc
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.body.hasOwnProperty("name"), "Body does not have the field name");
        client.assert(response.body["name"] === "flagOne");
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Returns flag by its name
GET http://{{baseUrl}}/name/thirdTestFlag
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.body.hasOwnProperty("name"), "Body does not have the field name");
        client.assert(response.body["name"] === "flagOne");
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Returns all flags for caching
GET http://{{baseUrl}}/caching?environmentName=testing&stateName=in_test
Accept: application/json